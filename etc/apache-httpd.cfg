# Apache HTTPD
# ============


# HTTPD configuration
# -------------------
[apache-httpd]
recipe = collective.recipe.template
input  = ${buildout:directory}/templates/apache-httpd.conf.in
output = ${buildout:parts-directory}/templates/apache-httpd.conf
local-ip = ${addressing:ip}
local-hostname = ${addressing:hostname}
public-hostname = ${hosts:public-hostname}
public-hostname-escaped = ${public-hostname-escaped:escaped}
dollar = $


# HTTPD configuration for SSL/TLS
# -------------------------------
[apache-httpd-ssl]
recipe = collective.recipe.template
input  = ${buildout:directory}/templates/apache-httpd-ssl.conf.in
output = ${buildout:parts-directory}/templates/apache-httpd-ssl.conf
local-ip = ${addressing:ip}
local-hostname = ${addressing:hostname}
public-hostname = ${hosts:public-hostname}
public-hostname-escaped = ${public-hostname-escaped:escaped}
dollar = $


# Certificate hashing
[certs]
recipe = cp.recipe.cmd
install_cmd =
    cd ${buildout:directory}/etc/certs
    rm -f *.0
    for f in *.pem; do
        hash=`openssl x509 -hash -noout -in $f` && ln -sf $f $hash.0
    done

[public-hostname-escaped]
recipe = mr.scripty
HOSTNAME = ${hosts:public-hostname}
escaped = return self.HOSTNAME.replace(u'.', ur'\.')


# Addressing
# ----------
#
# Come up with some reasonable guesses for the local host's public IP address
# and hostname.  Fails miserably on multihomed hosts.
[addressing]
recipe = mr.scripty
ip =
    ... import socket
    ... a = socket.gethostbyname(socket.gethostname())
    ... if a == '127.0.0.1': a = 'IP-ADDRESS-HERE'
    ... return a
hostname =
    ... import socket
    ... return socket.gethostname()
